name: Simple Test Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Grant Execute Permission to Gradle Wrapper
      run: chmod +x gradlew
      
    - name: Build Application (Simulated)
      run: ./gradlew build # Выполняем сборку, чтобы создать JAR

    # --- Шаг 1: Запуск приложения в фоновом режиме ---
    - name: Run Application JAR in Background
      run: |
        java -jar ./build/libs/app-mbank.jar & # Убедитесь, что путь к JAR правильный после сборки
        echo $! > app_pid.txt
      id: app_runner

    - name: Wait for Server to Start (Crucial Step)
      run: sleep 15 # Увеличим немного для надежности

    # --- Шаг 2: Запуск тестов, которые зависят от запущенного сервера ---
    # Предполагаем, что это тесты, которые падали (интеграционные)
    - name: Run Integration Tests Against Server
      run: |
        echo "Running integration tests..."
        # Если вы можете запустить только интеграционные тесты, сделайте это здесь.
        # Например, если они помечены тегом "integration":
        # ./gradlew test --tests "*IntegrationTest*" 
        
        # Если вы хотите запустить ВСЕ тесты, но теперь сервис доступен:
        ./gradlew test 
      # Если тесты упадут, этот шаг завершит работу джоба с ошибкой (exit code 1)

    # --- Шаг 3: Остановка сервера ---
    - name: Stop Application Server
      if: always()
      run: |
        APP_PID=$(cat app_pid.txt)        echo "Stopping application with PID: $APP_PID"
        kill $APP_PID || echo "Process $APP_PID was already dead."
        rm app_pid.txt
